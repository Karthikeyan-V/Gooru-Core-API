/////////////////////////////////////////////////////////////
// TaxonomyUtil.java
// gooru-api
// Created by Gooru on 2014
// Copyright (c) 2014 Gooru. All rights reserved.
// http://www.goorulearning.org/
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/////////////////////////////////////////////////////////////
package org.ednovo.gooru.application.util;

import java.io.File;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.axis.utils.ByteArrayOutputStream;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;
import org.ednovo.gooru.core.api.model.Code;
import org.ednovo.gooru.core.constant.ConfigConstants;
import org.ednovo.gooru.domain.service.setting.SettingService;
import org.ednovo.gooru.domain.service.taxonomy.TaxonomyService;
import org.ednovo.gooru.infrastructure.persistence.hibernate.taxonomy.TaxonomyRespository;
import org.ednovo.gooru.infrastructure.transformer.XMLTransformer;
import org.xml.sax.InputSource;


public class TaxonomyUtil {

	public static final String CODE_SIMPLEVIEW_EXCLUDES[] = { "*.associatedCodes", "*.description", "*.taxonomySet", "*.class", "*.displayOrder", "*.parentId", "*.s3UploadFlag", "*.isAutogeneratedCode", "*.parentsList", "*.rootNodeId" };
	public static final String CODE_LIBRARYVIEW_EXCLUDES[] = { "*.associatedCodes", "*.description", "*.taxonomySet", "*.class", "*.displayOrder", "*.parentId", "*.s3UploadFlag", "*.isAutogeneratedCode", "*.parentsList", "*.rootNodeId", "*.codeType" };
	public static final String CODE_LIBRARYVIEWC_EXCLUDES[] = { "*.associatedCodes", "*.description", "*.taxonomySet", "*.class", "*.displayOrder", "*.parentId", "*.s3UploadFlag", "*.isAutogeneratedCode", "*.parentsList", "*.rootNodeId", "*.codeType", "*.codeUid", "*.segmentTiltlesAndOIds" };
	public static final String CODE_LIBRARYVIEWQ_EXCLUDES[] = { "*.associatedCodes", "*.description", "*.taxonomySet", "*.class", "*.displayOrder", "*.parentId", "*.s3UploadFlag", "*.isAutogeneratedCode", "*.parentsList", "*.rootNodeId", "*.codeType", "*.taxonomyImageUrl", "*.codeImage", "*.label",
			"*.assetURI", "*.codeUid", "*.taxonomyDataSet" };

	public static final String CODE_PARENTS_EXCLUDES[] = { "*.associatedCodes", "*.description", "*.taxonomySet", "*.class", "*.displayOrder", "*.parentId" };
	public static final String CODE_THUMBNAILS_EXCLUDES[] = { "*.associatedCodes", "*.description", "*.taxonomySet", "*.class", "*.displayOrder", "*.parentId", "code", "codeType", "rootNodeId", "s3UploadFlag", "parent", "depth" };

	public static String GOORU_ORG_UID = SettingService.instance.getConfigSetting("organization.gooru.uid");
	
	public static final void updateClassplanLibrary(String taxonomyPath, Integer rootCodeId) throws Exception {
		
		Document taxonomyXML = null;
		SAXReader reader = new SAXReader();
		try {
			taxonomyXML = reader.read(taxonomyPath + "/" + rootCodeId + ".xml");
		} catch (DocumentException e) {
			throw new RuntimeException(e);
		}

		String taxonomyStep2XML = XMLTransformer.getInstance().transform(taxonomyXML, "VIEW_CLASSPLAN_LIBRARY_XSL_PATH_STEP_1", taxonomyPath, null);

		InputSource is = new InputSource();
		is.setCharacterStream(new StringReader(taxonomyStep2XML));
		taxonomyXML = reader.read(is);

		String taxonomyHTML = XMLTransformer.getInstance().transform(taxonomyXML, "VIEW_CLASSPLAN_LIBRARY_XSL_PATH_STEP_2", taxonomyPath, null);

		final String encoding = (new OutputStreamWriter(new ByteArrayOutputStream())).getEncoding();
		FileUtils.writeStringToFile(new File(taxonomyPath + "/taxonomy.html"), taxonomyHTML, encoding);
	}

	public static final void updateTaxonomyTree(String taxonomyPath, Integer rootCodeId) throws Exception {
		Document taxonomyXML = null;
		SAXReader reader = new SAXReader();
		try {
			taxonomyXML = reader.read(taxonomyPath + "/" + rootCodeId + ".xml");
		} catch (DocumentException e) {
			throw new RuntimeException(e);
		}
		

		String taxonomyStep2XML = XMLTransformer.getInstance().transform(taxonomyXML, "VIEW_CLASSPLAN_LIBRARY_XSL_PATH_STEP_1", taxonomyPath, null);

		InputSource is = new InputSource();
		is.setCharacterStream(new StringReader(taxonomyStep2XML));
		taxonomyXML = reader.read(is);

		String taxonomyStep4XML = XMLTransformer.getInstance().transform(taxonomyXML, "CLASSPLAN_LIBRARY_Tree_XSL_PATH_STEP_3", taxonomyPath, null);

		is.setCharacterStream(new StringReader(taxonomyStep4XML));
		taxonomyXML = reader.read(is);

		String taxonomyHTML = XMLTransformer.getInstance().transform(taxonomyXML, "CLASSPLAN_LIBRARY_Tree_XSL_PATH_STEP_4", taxonomyPath, null);

		final String encoding = (new OutputStreamWriter(new ByteArrayOutputStream())).getEncoding();
		FileUtils.writeStringToFile(new File(taxonomyPath + "/tree.html"), taxonomyHTML, encoding);
	}

	public static final void updateResourceLibrary(String taxonomyPath, Integer rootCodeId) throws Exception {

		Document taxonomyXML = null;
		SAXReader reader = new SAXReader();
		try {
			taxonomyXML = reader.read(taxonomyPath + "/" + rootCodeId + ".xml");
		} catch (DocumentException e) {
			throw new RuntimeException(e);
		}
		String taxonomyStep2XML = XMLTransformer.getInstance().transform(taxonomyXML, "VIEW_CLASSPLAN_LIBRARY_XSL_PATH_STEP_1", taxonomyPath, null);

		InputSource is = new InputSource();
		is.setCharacterStream(new StringReader(taxonomyStep2XML));
		taxonomyXML = reader.read(is);

		try {
			String taxonomyHTMLResource = XMLTransformer.getInstance().transform(taxonomyXML, "VIEW_RESOURCE_LIBRARY_XSL_PATH_STEP_2", taxonomyPath, null);
			final String encoding = (new OutputStreamWriter(new ByteArrayOutputStream())).getEncoding();
			FileUtils.writeStringToFile(new File(taxonomyPath + "/taxonomyResource.html"), taxonomyHTMLResource, encoding);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	public static final Map<Integer, List<Code>> getTaxonomyMapByCode(Set<Code> taxonomySet, TaxonomyService taxonomyService) {

		Iterator<Code> iter = taxonomySet.iterator();
		Map<Integer, List<Code>> codeParentsMap = new HashMap<Integer, List<Code>>();
		while (iter.hasNext()) {
			Code code = iter.next();

			List<Code> codeList = taxonomyService.findParentTaxonomy(code.getCodeId(), true);
			codeParentsMap.put(code.getCodeId(), codeList);

		}
		return codeParentsMap;
	}
	
	public static final Map<Integer, List<Map<String, Object>>> getTaxonomyByCode(Set<Code> taxonomySet, TaxonomyService taxonomyService) {

		Iterator<Code> iter = taxonomySet.iterator();
		Map<Integer, List<Map<String, Object>>> codeParentsMap = new HashMap<Integer, List<Map<String, Object>>>();
		while (iter.hasNext()) {
			Code code = iter.next();

			List<Code> codeList = taxonomyService.findParentTaxonomy(code.getCodeId(), true);
			List<Map<String, Object>> taxonomyMap = new ArrayList<Map<String, Object>>();
			for (Code listCode : codeList) {
				taxonomyMap.add(getTaxonomyMapCode(listCode));
			}
			codeParentsMap.put(code.getCodeId(), taxonomyMap);

		}
		return codeParentsMap;
	}
	
	public static Map<String, Object> getTaxonomyMapCode(Code code) {
		Map<String, Object> codeMap = new HashMap<String, Object>();
		codeMap.put("activeFlag", code.getActiveFlag());
		codeMap.put("code", code.getCode());
		codeMap.put("assetURI", code.getAssetURI());
		codeMap.put("codeId", code.getCodeId());
		codeMap.put("codeUid", code.getCodeUid());
		codeMap.put("depth", code.getDepth());
		codeMap.put("description", code.getDescription());
		codeMap.put("displayCode", code.getdisplayCode());
		codeMap.put("displayOrder", code.getDisplayOrder());
		codeMap.put("entryId", code.getEntryId());
		codeMap.put("grade", code.getGrade());
		codeMap.put("indexId", code.getIndexId());
		codeMap.put("indexType", code.getIndexType());
		codeMap.put("label", code.getLabel());
		codeMap.put("commonCoreDotNotation", code.getCommonCoreDotNotation());
		return codeMap;
	}

	public static final Map<String, String> getTaxonomyMapByName(Set<Code> taxonomySet, TaxonomyRespository taxonomyRepository) {

		Iterator<Code> iter = taxonomySet.iterator();
		Map<String, Set<String>> codeParentsMap = new HashMap<String, Set<String>>();
		while (iter.hasNext()) {
			Code code = iter.next();

			List<Code> codeList = new ArrayList<Code>();
			codeList = taxonomyRepository.findParentTaxonomy(code.getCodeId(), true);
			for (Code taxonomyCode : codeList) {
				String taxonomyKey = taxonomyCode.getCodeType().getLabel();
				Set<String> taxonomyValues = codeParentsMap.get(taxonomyKey);
				if (taxonomyValues == null) {
					taxonomyValues = new HashSet<String>();
				}
				taxonomyValues.add(taxonomyCode.getLabel());
				codeParentsMap.put(taxonomyKey, taxonomyValues);
			}
		}

		Map<String, String> taxonomyKeyValues = new HashMap<String, String>();
		for (String taxonomyKey : codeParentsMap.keySet()) {

			Set<String> taxonomyValues = codeParentsMap.get(taxonomyKey);
			taxonomyKeyValues.put(taxonomyKey, StringUtils.join(taxonomyValues, ","));
		}

		return taxonomyKeyValues;
	}
	

	public static Integer getTaxonomyRootId(String organizationUid) {
		String codeId = SettingService.getInstance().getOrganizationSetting(ConfigConstants.TAXONOMY_ROOT, organizationUid);
		return codeId != null ? Integer.valueOf(codeId) : null;
	}
	
	
}

