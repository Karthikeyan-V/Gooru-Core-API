package org.ednovo.gooru.core.api.model;

import java.io.Serializable;
import java.util.List;

import org.dom4j.DocumentHelper;
import org.dom4j.Element;
//import org.ednovo.gooru.domain.model.taxonomy.Code;
//import org.ednovo.gooru.domain.model.taxonomy.CodeType;

public class TaxonomyDTO implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -6919608069621019645L;
	private List<Code> codes;
	private String title;
	private List<CodeType> codetypes;
	
	public List<CodeType> getCodetypes() {
		return codetypes;
	}
	public void setCodetypes(List<CodeType> codetypes) {
		this.codetypes = codetypes;
	}
	public List<Code> getCode() {
		return codes;
	}
	public void setCode(List<Code> code) {
		this.codes = code;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	
	public String findListXml()
	{
		Element list = DocumentHelper.createElement("list");

		for (Code code : this.codes) {
			Element taxonomy = list.addElement("taxonomy");  
			taxonomy.addAttribute("code",code.getCode().toString());
			taxonomy.addAttribute("label",code.getLabel());
			taxonomy.addAttribute("codeId",code.getCodeId().toString());
			taxonomy.addAttribute("codeUId",code.getCodeUid().toString());
			taxonomy.addAttribute("depth",code.getDepth().toString());
			taxonomy.addAttribute("rootNodeId", code.getRootNodeId().toString());
			taxonomy.addAttribute("typeId", code.getCodeType().getTypeId().toString());
			taxonomy.addAttribute("order", String.valueOf(code.getDisplayOrder()));
			taxonomy.addAttribute("activeFlag", code.getActiveFlag().toString());
			taxonomy.addAttribute("displayCode", code.getdisplayCode());
			//taxonomy.addAttribute("patentId", code.getParentId().toString());
			
		}

		return list.asXML();	
	}
	
	public String findNodeXml()
	{
		Element taxonomy =null ;
		for (Code code : this.codes) {
			taxonomy = DocumentHelper.createElement("node");
			taxonomy.addAttribute("code",code.getCode());
			taxonomy.addAttribute("label",code.getLabel());
			taxonomy.addAttribute("order",Integer.toString(code.getDisplayOrder()));
			taxonomy.addAttribute("depth",code.getDepth().toString());
			taxonomy.addAttribute("codeId",code.getCodeId().toString());
			taxonomy.addAttribute("codeUId",code.getCodeUid().toString());
			taxonomy.addAttribute("order", String.valueOf(code.getDisplayOrder()));
			taxonomy.addAttribute("displayCode", code.getdisplayCode());
		}
		return taxonomy.asXML();
	}
	
	public String findLevelsXml()
	{
		Element list = DocumentHelper.createElement("list");

		for (CodeType code : this.codetypes) {
			Element taxonomy = list.addElement("level");  
			taxonomy.addAttribute("depth",code.getDepth().toString());
			taxonomy.addAttribute("label",code.getLabel());
			taxonomy.addAttribute("codeId",code.getCode().getCodeId().toString());
			taxonomy.addAttribute("isCodeAutogenerated", code.getIsAutogeneratedCode().toString());
			taxonomy.addAttribute("rootNodeId", code.getCode().getRootNodeId().toString());
			taxonomy.addAttribute("code", code.getCode().getCode());
		}

		return list.asXML();
	}
	
	public String findTaxonomyXml()
	{
		Element taxonomy =null ;
		for (Code code : this.codes) {
			taxonomy = DocumentHelper.createElement("taxonomy");
			taxonomy.addAttribute("code",code.getCode());
			taxonomy.addAttribute("label",code.getLabel());
			taxonomy.addAttribute("depth",code.getDepth().toString());
			taxonomy.addAttribute("codeId",code.getCodeId().toString());
			taxonomy.addAttribute("codeUId",code.getCodeUid().toString());
			taxonomy.addAttribute("displayCode", code.getdisplayCode());
			taxonomy.addAttribute("order", String.valueOf(code.getDisplayOrder()));
			taxonomy.addAttribute("isCodeAutoGenerated", String.valueOf(code.getCodeType().getIsAutogeneratedCode()));
		}
		return taxonomy.asXML();
	}
	
	public String findAllTaxonomyXMl()
	{
		Element list = DocumentHelper.createElement("list");

		for (CodeType code : this.codetypes) {
			Element taxonomy = list.addElement("level");  
			taxonomy.addAttribute("depth",code.getDepth().toString());
			taxonomy.addAttribute("label",code.getLabel());
			taxonomy.addAttribute("code",code.getCode().getCode());
			taxonomy.addAttribute("codeId",code.getCode().getCodeId().toString());
		}
		return list.asXML();
	}
	
	public String findLevelXml()
	{
		Element taxonomy =null ;
		for (CodeType code : this.codetypes) {
			taxonomy = DocumentHelper.createElement("level");
			taxonomy.addAttribute("code",code.getCode().getCode());
			taxonomy.addAttribute("label",code.getLabel());
			taxonomy.addAttribute("depth",code.getDepth().toString());
			taxonomy.addAttribute("codeId",code.getCode().getCodeId().toString());
		}
		return taxonomy.asXML();
	}
	
	public String findMappingXml(Code code)
	{
		Element taxonomy = DocumentHelper.createElement("node");
		taxonomy.addAttribute("code",code.getCode());
		taxonomy.addAttribute("label",code.getLabel());
		taxonomy.addAttribute("order",Integer.toString(code.getDisplayOrder()));
		taxonomy.addAttribute("depth",code.getDepth().toString());
		taxonomy.addAttribute("codeId",code.getCodeId().toString());
		taxonomy.addAttribute("displayCode", code.getdisplayCode().toString());
		
		if(this.codes!=null){
		for (Code codeMapping : this.codes) {
			Element node = taxonomy.addElement("node");  
			node.addAttribute("code",codeMapping.getCode());
			node.addAttribute("label",codeMapping.getLabel());
			node.addAttribute("order",Integer.toString(codeMapping.getDisplayOrder()));
			node.addAttribute("depth",codeMapping.getDepth().toString());
			node.addAttribute("codeId",codeMapping.getCodeId().toString());
			node.addAttribute("displayCode", codeMapping.getdisplayCode());
			
		
			for (Code parentCode : codeMapping.getParentsList()) {
				Element partentNode = DocumentHelper.createElement("node");
				partentNode.addAttribute("code",parentCode.getCode());
				partentNode.addAttribute("label",parentCode.getLabel());
				partentNode.addAttribute("order",Integer.toString(parentCode.getDisplayOrder()));
				partentNode.addAttribute("depth",parentCode.getDepth().toString());
				partentNode.addAttribute("codeId",parentCode.getCodeId().toString());
				partentNode.addAttribute("displayCode",parentCode.getdisplayCode());
				node.add(partentNode);
			}
		}
		}
		return taxonomy.asXML();	
	}
}
